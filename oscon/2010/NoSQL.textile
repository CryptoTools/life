h1. Building a NOSQL Data Cloud

* OSI Layer 8: Legal & Politics
* OSI Layer 9: Tecnology Religion

h2. NOSQL is a feature set

* Implemented in Cassandra, HBase, etc.
* Append-only at runtime
* Search patterns using *Bloom Filters*, whatever those are...
* Solve specific problems very well, general problems to a certain extent

h2. Types of NOSQL

|KV Stores|Column|Document|Graph|
|MapReduce and others|Cassandra|CouchDB|FlockDB|
||BigTable|MongoDB|InfiniteGraph|
||HBase|||

h2. Examples

h3. Bit.ly 

* uses MongoDB
* 1.25B shortens per month

h3. Wordnik

* MySQL crapped out at 4B rows
* used MongoDB
* Read from Mongo was so good, memcached was not necessary.

h3. LHC @ CERN!

* Called DAS(Data Aggregation System)
* Uses MongoDB
* Distributed 2-6 petabytes! of data
* Combine info from different metadata sources
* Query without knowing their existence
* User has domain knowledge, but doesn't deal with various formats, interfaces, semantics
* Returns JSON documents

h2. Differences

* Most of this stuff is read-centric.  We're more write-centric.

h2. MongoDB

* Totally awesome Javascript functions right in there.
* DBs can just be created like jelly beans

<pre>
> person={"name":"Bob", "phone":"555-2323"}
> use test
> db.persons.insert(person)
</pre>

Used the database test to create a table persons and inserted our person!

<pre>
> db.persons.find()
# Returns a JSON dude.
</pre>

You can actually index 2 columns using ensureIndex.
You can do some hot mapreduce action.

h2. Cassandra

* Started at Facebook
* Now apache top-level product
* Symmetric - 10 instances for instance are all equal.
** You write on one, and it appears on others....
* Always writable
* High write throughput
** MySQL: ~300ms/Write, ~350ms/Read
** Cassandra: ~0.12ms/Write, ~15ms/Read
* Java...

bq. Or you can have Soooooper columns!

* Super columns allow you to join columns together and give them a name
* Tunable consistency knobs - you can either care about transactional writes and reads, or not.
** *Good for them!*


